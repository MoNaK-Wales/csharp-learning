using System;
using System.Linq;

namespace arrays
{
    class Program
    {
        static void Main(string[] args)
        {
            //массив представляет набор однотипных данных. объявление:
            //тип_переменной[] название_массива = new тип_переменной[количество_элементов];
            int[] nums = new int[4];    //так создался массив nums, для 4 целых чисел
            Console.WriteLine(nums[2]); //пока не указаны элементы, для int/float/double массива все будут 0, для string/char — пустая строка, для bool — false

            //сразу можно указать значения для этих элементов. также, необязательно указывать количество элементов, тип и new[]. Все эти записи равноценны:
            int[] nums2 = new int[4] { 1, 2, 3, 5 };
            int[] nums3 = new int[] { 1, 2, 3, 5 };
            int[] nums4 = new[] { 1, 2, 3, 5 };
            int[] nums5 = { 1, 2, 3, 5 };

            //индексы обычных массивов указываются почти как в пайтоне
            string[] names = { "Harry", "Mike", "Jake", "Paul" };
            Console.WriteLine("1-ый индекс: " + names[1]);              //Mike
            names[1] = "Ivan";                                          //теперь массив выглядит так: { "Harry", "Ivan", "Jake", "Paul" }
            Console.WriteLine("изменённый 1-ый индекс: " + names[1]);   //Ivan



            //массив может иметь несколько измерений и называется "многомерный"
            int [ , ] nums2d = new int[3, 4];       //с помощью 1 запятой, мы создали двухмерный массив, состоящий из 3 строк и 4 столбцов
                                                    //двухмерный массив по сути является матрицей, что в пайтоне можно представить так:
                                                                                                    /*  [[0, 0, 0, 0],
                                                                                                         [0, 0, 0, 0],
                                                                                                         [0, 0, 0, 0]]  */
            //можно так же устанавливать значения им через {}; необязательно писать new int [,]
            int[,] nums2d2 = { { 0, 1, 2 }, { 3, 4, 5 } };      //так мы создали двумерный массив [2, 3].                                  0    1   2
                                                                //каждый вложенный массив является строкой, а элементы — столбцами         3    4   5

            Console.WriteLine(nums2d2[1, 0]);                   //для получения элемента нужно через запятую обратится сначала к строке, а затем к стобцу. Вывод: 3

            //могут быть и массивы с большим количеством измерений, однако обычно используется не больше двух
            int[,,] nums3d = new int[3, 3, 3];  //получился своеборазный "куб" из значений
            int[,,,] nums4d = new int[2, 4, 3, 5];


            //От многомерных массивов надо отличать массив массивов или так называемый "зубчатый массив".
            //Их отличие в том, что вложенные массивы могут иметь разную длинну, тогда как в многомерном везде одинаковое к-ство элементов
            int[][] numsArrays = new int[3][];            /*длинна массива указывается только в первых скобках (тут массив содержит 3 массива целых чисел),
                                                          остальные скобки пустые.*/
            numsArrays[0] = new int[5] { 1, 2, 8, 9, 7};  // выделяем память для первого подмассива
            numsArrays[1] = new int[3] { 1, 2, 3 };       // выделяем память для второго подмассива
            numsArrays[2] = new int[5] { 1, 2, 3, 4, 5 }; // выделяем память для третьего подмассива

            //можно определять так
            int[][] numsArrays2 = {
                new int[] { 1, 2 },
                new int[] { 1, 2, 3 },
                new int[] { 1, 2, 3, 4, 5 }
            };

            //обратиться к элементу зубчатого массива: имя_массива[индекс_вложенного_массива][индекс_элемента_во_вложенном_массиве]
            Console.WriteLine(numsArrays2[2][3]); //4

            //также можно определить ступенчатый массив, который хранит многомерные массивы
            int[][,] matrixArrays = new int[3][,]
            {
                new int[,] { {1,3}, {5,7} },
                new int[,] { {0,2}, {4,6}, {8,10} },
                new int[,] { {11,22}, {99,88}, {0,9} }
            };
            Console.WriteLine(matrixArrays[2][0, 1]); //22


            //массивы имеют такие свойства: Length, Rank
            int[] forlength = { 0, 5, 12, 67 };                                 //Length возвращает количество элементов массива
            int[,] forlength2 = { { 3, 1, 4, 90 }, { 2, 42, 0, 5 } };
            int[][] forlength3 = new int[5][];
            Console.WriteLine("в обычном массиве: "+forlength.Length);          //всего элементов 4
            Console.WriteLine("в двухмерном массиве: " + forlength2.Length);    //в многомерных выводится общее к-во элементов: 8
            Console.WriteLine("в ступенчатом массиве: " + forlength3.Length);   //в зубчатых выводится к-во внутренних массивов: 5

            int[] rank1d = new int[3];                                                      //Rank возвращает количество измерений в массиве
            int[,,] rank3d = new int[ 4, 5, 6];
            int[,,,,,,,] rank8d = new int[2, 3, 4, 5, 6, 7, 8, 9];
            Console.WriteLine("измерений в обычном массиве: "+rank1d.Rank);                 //1
            Console.WriteLine("измерений в трёхмерном массиве: " + rank3d.Rank);            //3
            Console.WriteLine("измерений в восьмимерном массиве: " + rank8d.Rank);          //8

            //также есть методы:
            int[] methArr = { 1, -4, 8, 2 };
            int[,] matrixArr = new int[3, 5];
            Console.WriteLine("максимальное значение: " + methArr.Max());                       //максимальное значение в списке: 8
            Console.WriteLine("миниимальное значение: " + methArr.Min());                       //минимальное значение в списке: -4
            Console.WriteLine("сумма значений: " + methArr.Sum());                              //сумма значений в списке: 7
            Console.WriteLine("последний индекс в 1 измерении: " + matrixArr.GetUpperBound(0)); //возвращает последний индекс в заданном измерении, проще говоря число,
                                                                                    //написанное при определении массива-1. В int[3, 5] первое число 3, поэтому вывод 2
            Console.WriteLine("последний индекс в 2 измерении: " + matrixArr.GetUpperBound(1)); //В int[3, 5] второе число 5, поэтому вывод 4




            //Строки string принято считать также массивом символов. они имеют множество методов и свойств, а также можно получить символ строки по индексу
            string text = "some text";
            Console.WriteLine("символ 1-ого индекса текста: "+text[1]);

          /*Length возвращает количество символов в строке
            Index of возвращает индекс первого вхождения заданного символа в строке
            Insert(индекс, значение) вставляет заданное значение начиная с заданного индекса
            Replace заменяет указанное значение на новое
            Remove(индекс, к-во_символов) удаляет указанное к-во символы начиная с указанного индекса. Если количество не указано, то операция продолжается до конца строки
            Substring(индекс, длинна) возвращает подстроку указанной длинны, начиная с указанного индекса. Если длинна не указанна, то операция продолжается до конца строки
            Contains возвращает true, если строка содержит указанное значение*/
            Console.WriteLine("длинна текста: "+text.Length);                   //9
            Console.WriteLine("индекс 1-ого символа t: "+text.IndexOf('t'));    //5
            Console.WriteLine(text.Insert(5, "interesting "));                  //"some interesting text"
            Console.WriteLine(text.Replace("some", "beautiful"));               //"beautiful text"
            Console.WriteLine(text.Remove(4));                                  //"some"
            Console.WriteLine(text.Substring(2, 5));                            //"me te"
            Console.WriteLine(text.Contains("text"));                           //true



            Console.ReadLine();
        }
        static void task()
        {
            string[] words = { "home", "programming", "victory", "C#", "football", "sport", "book", "learn", "dream", "fun" };
            string letter = Console.ReadLine().ToLower();
            int counter = 0;
            foreach (string k in words)
            {
                if (k.ToLower().Contains(letter))
                {
                    Console.WriteLine(k);
                    counter++;
                }
            }
            if (counter == 0)
                Console.WriteLine("No match");
        }
    }
}
